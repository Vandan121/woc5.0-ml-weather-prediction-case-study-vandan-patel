# -*- coding: utf-8 -*-
"""Python fundamentals

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l2aFGde4MSLlP9QKOtZ3OKlB4p4gE9AI

# Python

Python is one of the most popular programming languages for machine learning, both in academia and in industry. As such, it is essential to learn this language for anyone interested in machine learning. In this section, we will review Python basics.

## Lists

Lists are a container type for ordered sequences of elements. Lists can be initialized empty
"""

my_list = []

"""or with some initial elements"""

my_list = [1, 2, 3]

"""Lists have a dynamic size and elements can be added (appended) to them"""

my_list.append(4)
my_list

"""We can access individual elements of a list (indexing starts from 0)"""

my_list[2]

"""We can access "slices" of a list using `my_list[i:j]` where `i` is the start of the slice (again, indexing starts from 0) and `j` the end of the slice. For instance:"""

my_list[1:3]

"""Omitting the second index means that the slice shoud run until the end of the list"""

my_list[1:]

"""We can check if an element is in the list using `in`"""

5 in my_list

"""The length of a list can be obtained using the `len` function"""

len(my_list)

"""## Strings

Strings are used to store text. They can delimited using either single quotes or double quotes
"""

string1 = "some text"
string2 = 'some other text'

"""Strings behave similarly to lists. As such we can access individual elements in exactly the same way"""

string1[3]

"""and similarly for slices"""

string1[5:]

"""String concatenation is performed using the `+` operator"""

string1 + " " + string2

"""## Conditionals

As their name indicates, conditionals are a way to execute code depending on whether a condition is True or False. As in other languages, Python supports `if` and `else` but `else if` is contracted into `elif`, as the example below demonstrates.
"""

my_variable = 5
if my_variable < 0:
  print("negative")
elif my_variable == 0:
  print("null")
else: # my_variable > 0
  print("positive")

"""Here `<` and `>` are the strict `less` and `greater than` operators, while `==` is the equality operator (not to be confused with `=`, the variable assignment operator). The operators `<=` and `>=` can be used for less (resp. greater) than or equal comparisons.

Contrary to other languages, blocks of code are delimited using indentation. Here, we use 2-space indentation but many programmers also use 4-space indentation. Any one is fine as long as you are consistent throughout your code.

## Loops

Loops are a way to execute a block of code multiple times. There are two main types of loops: while loops and for loops.

While loop
"""

i = 0
while i < len(my_list):
  print(my_list[i])
  i += 1 # equivalent to i = i + 1

"""For loop"""

for i in range(len(my_list)):
  print(my_list[i])

"""If the goal is simply to iterate over a list, we can do so directly as follows"""

for element in my_list:
  print(element)

"""## Functions

To improve code readability, it is common to separate the code into different blocks, responsible for performing precise actions: functions. A function takes some inputs and process them to return some outputs.
"""

def square(x):
  return x ** 2

def multiply(a, b):
  return a * b

# Functions can be composed.
square(multiply(3, 2))

"""To improve code readability, it is sometimes useful to explicitly name the arguments"""

square(multiply(a=3, b=2))

"""## Exercises

**Exercise 1.** Using a conditional, write the [relu](https://en.wikipedia.org/wiki/Rectifier_(neural_networks)) function defined as follows

$\text{relu}(x) = \left\{
   \begin{array}{rl}
     x, & \text{if }  x \ge 0 \\
     0, & \text{otherwise }.
   \end{array}\right.$
"""

def relu(x):
  # Write your function here
  if x >= 0:
    return x
  else: 
    return 0

relu(-3)

"""**Exercise 2.** Select the last three elements of the list 

a = [1,2,3,4,5,6]
"""

a = [1,2,3,4,5,6]
# Write your code here
a[3:5]